{"version":3,"sources":["/Users/kenji.morita/stanby-ats/stanby-ats-web/services/common/routes.ts","/Users/kenji.morita/stanby-ats/stanby-ats-web/controllers/profile-controller.ts","/Users/kenji.morita/stanby-ats/stanby-ats-web/profile-page.ts"],"names":["stb","stb.ConfigService","stb.ConfigService.constructor","stb.ConfigService.getConfig","stb.ConfigService.getConfigPromise","stb.ConfigService.refreshConfig","stb.UserService","stb.UserService.constructor","stb.UserService.checkLogin","stb.UserService.getAccountInfoPromise","stb.UserService.getAccountInfo","stb.UserService.updateAccountInfo","stb.UserService.refreshAccountInfo","stb.UserService.checkLoggedIn","st","stanby","stanby.services","stanby.services.common","stanby.services.common.routes","stanby.services.common.routes.initRoutes","controllers","controllers.profile","controllers.profile.Profile","controllers.profile.Profile.constructor","controllers.profile.Password","controllers.profile.Password.constructor","controllers.profile.Email","controllers.profile.Email.constructor","controllers.profile.BasicInfo","controllers.profile.BasicInfo.constructor","stanby.routing","stanby.routing.profile","stanby.routing.profile.initRouting"],"mappings":"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","file":"scripts/profile-page.js","sourcesContent":["/// <reference path=\"../../vendor_def/tsd.d.ts\" />\n\n\n\n\n\ninterface JQuery {\n  imgcentering(): void\n}\n\n\ninterface PopStateEvent {\n  dataTransfer: Object\n}\n\n\ninterface Object {\n  files: Object\n}\n\nmodule stb {\n  'use strict';\n\n  import acc = st.response.account\n  import cnf = st.response.configuration\n\n  export class ConfigService {\n    constructor(\n      private routes: st.Routes\n    ){}\n\n    private requestCount: number = 0;\n    private cachedPromise: ng.IHttpPromise<cnf.ConfigResponse>\n\n    public getConfig(callback: (res: cnf.ConfigResponse) => void) {\n\n      if(this.requestCount == 0){\n        this.refreshConfig();\n      }\n\n      this.cachedPromise.success((res: cnf.ConfigResponse) => {\n        if(callback) callback(res);\n      });\n    }\n\n    public getConfigPromise() {\n      if(this.requestCount == 0){\n        this.refreshConfig();\n      }\n\n      return this.cachedPromise;\n    }\n\n    private refreshConfig() {\n      this.cachedPromise = this.routes.configuration.retrieve();\n    }\n  }\n\n  export interface AccountInfoHandler {\n    (data?:acc.AccountInfoResponse): any\n  }\n  \n  export class UserService {\n\n    constructor(\n      private routes: st.Routes\n    ){}\n    \n    private requestCount: number = 0;\n    private cachedPromise:ng.IHttpPromise<acc.AccountInfoResponse>;\n\n\n    /**\n     * ログイン状態、非ログイン状態に応じて処理実行\n     * 初回コール時はHttpリクエストが発生するが2回目以降はキャッシュされた情報を利用する\n     * サーバに再問い合わせする場合は updateAccountInfo を利用 \n     * @param ifLogged: ログイン状態であれば実行する処理\n     * @param ifNotLogged: 非ログイン状態であれば実行する処理\n     */\n    public checkLogin(ifLogged: AccountInfoHandler, ifNotLogged?: Function){\n      if(this.requestCount == 0){\n        this.refreshAccountInfo();\n      }\n      this.checkLoggedIn(ifLogged, ifNotLogged);\n    }\n\n    public getAccountInfoPromise(): ng.IPromise<acc.AccountInfo> {\n      return this.cachedPromise.then((res) =>{\n          return res.data.account;\n      });\n    }\n\n    /**\n     * アカウント情報取得\n     * 初回コール時はHttpリクエストが発生するが2回目以降はキャッシュされた情報を利用する\n     * サーバに再問い合わせする場合は updateAccountInfo を利用\n     * @param callback\n     */\n    public getAccountInfo(ifLoggedInFunction: AccountInfoHandler) {\n      if(this.requestCount == 0){\n        this.refreshAccountInfo();\n      }\n      this.checkLoggedIn(ifLoggedInFunction, null);\n    }\n\n    /**\n     * 必ずサーバに問い合わせた上でアカウント情報を取得する\n     * 特に理由がなければ getAccountInfo でのキャッシュ利用を推奨\n     * @param callback\n     */\n    public updateAccountInfo(ifLoggedInFunction: AccountInfoHandler) {\n      this.refreshAccountInfo();\n      this.checkLoggedIn(ifLoggedInFunction, null);\n    }\n    \n    /* ==================\n     *  Assistant Methods\n     * ================== */\n    private refreshAccountInfo(): any {\n      this.requestCount++;\n      this.cachedPromise = this.routes.account.getAccountInfo();\n    }\n\n    private checkLoggedIn(ifLoggedInFunction   : AccountInfoHandler // ログイン済時に実行するFunction\n                         ,ifNotLoggedInFunction: Function           // 未ログイン時に実行するFunction\n                         ){\n      // NOTE(omiend): this.routes.account.getAccountInfo()はログインしていない場合「Status：200 - \"error.authentication\"」を返却\n      this.cachedPromise.success((data) => {\n        if (data.key === \"error.authentication\" && ifNotLoggedInFunction) {\n          ifNotLoggedInFunction();\n        } else if(ifLoggedInFunction){\n          ifLoggedInFunction(data);\n        }\n      });\n    }\n  }\n}\n\nmodule st {\n  'use strict';\n\n  export interface Routes {\n    configuration: routes.Configuration\n    utils: routes.Utils\n    jobs: routes.Jobs\n    applications: routes.Applications\n    interviews: routes.Interviews\n    docscreenings: routes.Docscreenings\n    corporate: routes.Corporate\n    corporatePublic: routes.CorporatePublic\n    users: routes.Users\n    profile: routes.Profile\n    account: routes.Account\n    images: routes.Images\n    validation: routes.Validation\n    masters: routes.Masters\n    contact: routes.Contact\n  }\n\n\n  export module routes {\n    import res = st.response\n    import QueryResultResponse = res.wrapper.QueryResultResponse;\n\n    export interface Configuration {\n      retrieve(): ng.IHttpPromise<response.configuration.ConfigResponse>\n    }\n\n    export interface Utils {\n      convertMarkdownToHtml(markdownText:string): ng.IHttpPromise<response.utils.HtmlText>\n    }\n\n    import ApplicationInfo          = res.applications.ApplicationInfo;\n    import ApplicationResponse      = res.applications.ApplicationResponse;\n    import ApplicationSearchParams  = res.applications.ApplicationSearchParams;\n    import AttachmentInfo           = res.applications.AttachmentInfo;\n\n    export interface Jobs {\n      list(): ng.IHttpPromise<response.jobs.JobListResponse>\n      findJobs(condition: ApplicationSearchParams): ng.IHttpPromise<response.jobs.JobListResponse>\n      detail(jobId:string): ng.IHttpPromise<response.jobs.Job>\n      create(data:any): ng.IHttpPromise<any>\n      update(jobId:string, data:any): ng.IHttpPromise<any>\n\n      detailFreeText(jobId:string): ng.IHttpPromise<any>\n\n      previewAsPc(data:any): ng.IHttpPromise<any>\n      previewAsMobile(data:any): ng.IHttpPromise<any>\n\n      applyPublishing(jobId:string): ng.IHttpPromise<any>\n      withdrawPublishing(jobId:string): ng.IHttpPromise<any>\n      cancelPublishing(jobId:string): ng.IHttpPromise<any>\n      updateClosingDay(jobId: string, closeAt: Date): ng.IHttpPromise<any>\n\n      validateAlias(data:any): ng.IHttpPromise<any>\n    }\n\n    export interface Applications {\n      list(condition: ApplicationSearchParams): ng.IHttpPromise<QueryResultResponse<ApplicationInfo>>\n      overviews(): ng.IHttpPromise<res.applications.ApplicationOverviewsResponse>\n      uploadTempFile(data)            : ng.IHttpPromise<AttachmentInfo>\n      details(applicationId:string)   : ng.IHttpPromise<ApplicationResponse>\n      fetchPhone(applicationId:string): any\n      fetchEmail(applicationId:string): any\n      downloadAttachment(applicationId: string, prefix: string, fileId: string): ng.IHttpPromise<any>\n      updateStatus(applicationId: string, selectionStage: string, versionNo: number): ng.IHttpPromise<any>\n      attachFile(applicationId, data) : ng.IHttpPromise<AttachmentInfo>\n      create(data:any): ng.IHttpPromise<any>\n      update(applicationId:string, data:any): ng.IHttpPromise<any>\n      addNote(applicationId:string, data: any): ng.IHttpPromise<any>\n      updateNote(applicationId:string, noteId, data: any): ng.IHttpPromise<any>\n    }\n\n\n    import Interview = res.interview.Interview;\n    import InterviewFeedback = res.interview.InterviewFeedback;\n    import InterviewSearchParams = res.interview.InterviewSearchParams;\n\n    export interface Interviews {\n      listAll(conditions : InterviewSearchParams)       : ng.IHttpPromise<QueryResultResponse<Interview>>\n      listAllToday(conditions : InterviewSearchParams)  : ng.IHttpPromise<QueryResultResponse<Interview>>\n      listMine(conditions : InterviewSearchParams)      : ng.IHttpPromise<QueryResultResponse<Interview>>\n      listMyUnrated(conditions : InterviewSearchParams) : ng.IHttpPromise<QueryResultResponse<Interview>>\n      detail(interviewId: string)                       : ng.IHttpPromise<Interview>\n      create(interview: Interview)                      : ng.IHttpPromise<any>\n      update(interviewId: string, interview: Interview) : ng.IHttpPromise<any>\n      addFeedback(interviewId: string, interviewfeedback: InterviewFeedback) : ng.IHttpPromise<any>\n      updateFeedback(interviewId: string, feedbackId, interviewfeedback: InterviewFeedback): ng.IHttpPromise<any>\n    }\n\n    export interface Docscreenings {\n      detail(interviewId: string)                       : ng.IHttpPromise<Interview>\n      create(interview: Interview)                      : ng.IHttpPromise<any>\n      update(interviewId: string, interview: Interview) : ng.IHttpPromise<any>\n      addFeedback(interviewId: string, interviewfeedback: InterviewFeedback) : ng.IHttpPromise<any>\n      updateFeedback(interviewId: string, feedbackId, interviewfeedback: InterviewFeedback): ng.IHttpPromise<any>\n    }\n\n    export interface Corporate {\n      update(any) : ng.IHttpPromise<any>\n      show()      : ng.IHttpPromise<any>\n    }\n\n    export interface Users {\n      list(status: string, role: string): ng.IHttpPromise<stanby.models.users.UserListResponse>\n      details(userId:string): ng.IHttpPromise<stanby.models.users.UserDetailResponse>\n      loginUserDetails(): ng.IHttpPromise<any>\n      create(data:any): ng.IHttpPromise<any>\n      update(userId:string, data:any): ng.IHttpPromise<any>\n      updateStatus(userId:string, data:any): ng.IHttpPromise<any>\n    }\n\n    export interface CorporatePublic {\n      show(): ng.IHttpPromise<any>\n      update(any): ng.IHttpPromise<any>\n    }\n\n    export interface Profile {\n      show(): ng.IHttpPromise<any>\n      update(data:any): ng.IHttpPromise<any>\n      changeEmail(data:any): ng.IHttpPromise<any>\n      changePassword(data:any): ng.IHttpPromise<any>\n      resendConfirmation(): ng.IHttpPromise<any>\n    }\n\n\n    export interface Account {\n      login(data:any): ng.IHttpPromise<any>\n      logout(): ng.IHttpPromise<any>\n      signup(data:any): ng.IHttpPromise<any>\n      forgotPassword(data:any): ng.IHttpPromise<any>\n      getAccountInfo(): ng.IHttpPromise<response.account.AccountInfoResponse>\n      verifySignup(token:string): ng.IHttpPromise<any>\n      verifyEmailChange(token:string): ng.IHttpPromise<any>\n      verifyForgotPassword(token:any): ng.IHttpPromise<any>\n      resetForgotPassword(data): ng.IHttpPromise<any>\n    }\n\n\n    export interface Images {\n\n      listLogos()   : ng.IHttpPromise<Array<res.images.PooledImage>>\n      listCovers()  : ng.IHttpPromise<Array<res.images.PooledImage>>\n      listInlines() : ng.IHttpPromise<Array<res.images.PooledImage>>\n\n      uploadLogo(data: any)           : ng.IHttpPromise<any>\n      uploadCover(data: any)          : ng.IHttpPromise<any>\n      uploadInline(data: any)         : ng.IHttpPromise<any>\n      deleteImage(imageId: string)    : ng.IHttpPromise<any>\n\n      getTemporary(imageId: string, yearMonth: string): ng.IHttpPromise<any>\n\n      uploadTemporaryLogo(data: any)  : ng.IHttpPromise<any>\n      uploadTemporaryCover(data: any) : ng.IHttpPromise<any>\n      uploadTemporaryInline(data: any): ng.IHttpPromise<any>\n    }\n\n\n    export interface Validation {\n      emailDuplicate(email:string): ng.IHttpPromise<any>\n      emailDuplicateForUpdate(newEmail:string, currentEmail:string): ng.IHttpPromise<any>\n      postalCode(postalCode:string): ng.IHttpPromise<any>\n      phone(phone:string): ng.IHttpPromise<any>\n    }\n\n\n    export interface Masters {\n      industries(): ng.IHttpPromise<any>\n      address(postalCode:string): ng.IHttpPromise<string>\n      benefits(jobTypeId:string): ng.IHttpPromise<string>\n      features(jobTypeId:string): ng.IHttpPromise<string>\n      occupations(): ng.IHttpPromise<any>\n      vacations(jobTypeId:string): ng.IHttpPromise<string>\n    }\n\n\n    export interface Contact {\n      send(email: string, inquiry: string): ng.IHttpPromise<any>\n    }\n  }\n\n\n  export module response {\n\n    export module pagination {\n      export interface PagingConditions {\n        offset?: number;\n        limit?: number;\n      }\n    }\n\n    export module wrapper {\n      export interface QueryResultResponse<T>{\n        requestInfo : QueryRequestInfo\n        resultInfo  : QueryResultInfo\n        hits        : Array<T>\n      }\n\n      export interface QueryResultInfo {\n        totalHits: number\n      }\n\n      export interface QueryRequestInfo {\n        offset: number\n        limit: number\n      }\n    }\n    export module configuration {\n      export interface ConfigResponse {\n        configuration: Configration\n      }\n      export interface Configration {\n        image: {\n          rootPath: string\n          maxNumberOf: number\n        }\n      }\n    }\n\n    export module utils {\n      export interface HtmlText {\n        htmlText: string\n      }\n    }\n\n    export module account {\n      export interface AccountInfoResponse {\n        account: AccountInfo\n        key: string\n      }\n      export interface AccountInfo {\n        userId: string\n        corporateId: string\n        fullName: string\n        email: string\n        roles:string[]\n      }\n    }\n    \n    export module corporate {\n      export interface CorporateInfo {\n        name: string\n      }\n    }\n    \n    export module jobs {\n\n      export interface JobListResponse {\n        jobs: Job[]\n      }\n\n      export interface Job { //V2\n        id: string;\n        openedAt: string;\n        closeAt: string;\n        jobIdAlias: string;\n        noEndDate: boolean;\n        name: string;\n        jobStatus?: string;\n        jobType: string;\n        versionNo: number;\n        updatedBy: string;\n        updatedAt: any; //TODO(kobayashi): [a] Dateにしたい\n        content?: JobDetails;\n        htmlFreeText?: string;\n        coverImage: images.CoverImage;\n        indexingStatus?: string;\n        rejectReason?: string;\n        jseJobPageUrl?: string;\n        matchingSearchCond?: boolean; // 一覧表示時の絞り込み用\n      }\n\n      export interface JobWithApplicationCount extends Job {\n        countAll?: number;\n        countNoAction?: number;\n        deadline?: string;\n        byStage?: any;\n      }\n\n      export interface JobSearchParams {\n        name?: string;\n        jobStatus?: string;\n        applicableStatus?: string;\n        indexingStatus?: string;\n      }\n\n      export interface  JobDetails { //V2\n        jobAdTitle: string;\n        salary: JobSalary;\n        locations: Array<JobLocation>;\n        locationSupplement: String;\n        descriptions: Array<JobTermDescription>;\n        markdownFreeText?: string;\n      }\n\n      export interface JobSalary { //V2\n        unit: string;\n        amountFrom: number;\n        amountTo: number;\n        supplement: string;\n      }\n\n      export interface JobLocation { //V2\n        postalCode: string;\n        address: string;\n      }\n\n      export interface JobTermDescription { //V2\n        term: string;\n        description: string;\n      }\n    }\n\n    export module interview {\n\n      export interface InterviewSearchParams extends pagination.PagingConditions {\n        interviewerId?: string; // ignored when querying one's own list\n        interviewType?: string; // DOC = 書類選考 / INT = 面接 / 設定なし ＝両方\n        keyword?      : string;\n        from?         : any; // Date or String (in UTC/ISO-861)\n        to?           : any; // Date or String (in UTC/ISO-861)\n        feedback?     : string; // Y/N or none\n      }\n\n      export interface Interview {\n        id?             : string;\n        title           : string;\n        startAt?        : string; //日時 in ISO/UTC\n        endAt?          : string; //日時 in ISO/UTC\n        place?          : string;\n        note?           : string;\n        interviewer?    : Interviewer;\n        interviewType   : string;\n        application?    : InterviewRefApplication;\n        job?            : InterviewRefJob;\n        feedbacks?      : Array<InterviewFeedback>;\n        updatedBy?      : masters.UserIdName;\n        updatedAt?      : string; //日時 in ISO/UTC\n        applicationId?  : string; //更新時のみ\n        versionNo?      : string;\n      }\n\n      export interface InterviewSummary {\n        total           : number;\n        interviews      : Array<Interview>\n      }\n\n      export interface Interviewer {\n        name    : string;\n        userId  : string; //NOTE(kitaly): null の場合有\n      }\n\n      export interface InterviewRefApplication {\n        applicationId     : string;\n        appliedAt         : string; //日時 in ISO/UTC\n        fullName          : string;\n        fullNameKana      : string;\n        lastTitle         : string;\n        lastOrganization  : string;\n        phone             : string;\n        email             : string;\n        birthDate         : masters.YearMonthDay;\n      }\n\n      export interface InterviewRefJob {\n        jobId       : string;\n        jobName     : string;\n        jobAdTitle  : string;\n      }\n\n      export interface InterviewFeedback {\n        interviewId?   : string; //NOTE(kitaly): APIからのJSONには無いので、クライアント側で挿入する必要あり\n        interviewType? : string;\n        interviewTitle?: string;\n        feedbackId?    : string;\n        grade          : string;\n        summary        : string;\n        updatedBy?     : masters.UserIdName;\n        updatedAt?     : string; //日時 in ISO/UTC\n      }\n    }\n\n    export module applications {\n\n      import UserIdName = masters.UserIdName\n      import YearMonth = masters.YearMonth\n      import YearMonthDay = masters.YearMonthDay\n\n      export interface ApplicationOverviewsResponse { // V2\n        overviews: ApplicationCountByJob[];\n      }\n\n      /**\n       * 応募者詳細APIのレスポンス\n       */\n      export interface ApplicationResponse { // V2\n        application: ApplicationInfo;\n      }\n\n      // 応募概況\n      export interface ApplicationCountByJob {\n        jobId: string;\n        countAll: number;\n        countNoAction: number;\n        byStage: Map<string, number>;\n      }\n\n      export interface ApplicationSearchParams extends pagination.PagingConditions {\n        keyword?: string;\n        jobId?: string;\n        statuses?: string; // TODO(omiend) 2.0.x :statusesはできれば複数選択にしたい\n      }\n\n      /**\n       * 応募情報 (V2)\n       */\n      export interface ApplicationInfo {\n        id: string;\n        appliedAt         : Date;\n        profile           : ApplicationProfile;\n        resumeFreeText    : string;\n        hasEmail          : boolean;\n        hasPhone          : boolean;\n        versionNo         : number;\n        updatedBy         : UserIdName;\n        updatedAt         : string;\n        createdAt         : string;\n        selectionStage    : string;\n        applicationSource : string;\n        message?          : string;\n        resume?           : Resume;\n        job?              : ApplicationJob;\n        selectionHistory? : Array<ApplicationStatus>;\n        notes?            : Array<ApplicationNote>;\n        interviews?       : Array<interview.Interview>;\n        attachments?      : Array<AttachmentInfo>;\n\n        //更新時用\n        attachmentIds?    : Array<AttachmentIdInfoAdd>; //新規作成時の添付ファイル追加用プロパティ\n        addAttachmentIds? : Array<AttachmentIdInfoAdd>; //更新時の添付ファイル追加用プロパティ\n        delAttachmentIds?  : Array<AttachmentIdInfoDelete>; //更新時の添付ファイル削除用プロパティ\n      }\n\n      /**\n       * 応募者プロフィール (V2)\n       */\n      export interface ApplicationProfile {\n        fullName: string;\n        fullNameKana: string;\n        lastOrganization?: string;\n        lastTitle?: string;\n        birthDate?: YearMonthDay;\n        gender?: string;\n        postalCode?: string;\n        address1?: string;\n        address2?: string;\n        currentOccupation?: string;\n        currentSalary?: string;\n        email: string;\n        phone: string;\n      }\n\n      /**\n       * 選考ステータス (V2)\n       */\n      export interface ApplicationStatus {\n        selectionStage: string;\n        updatedBy: UserIdName;\n        updatedAt: string;\n      }\n\n      /**\n       * 添付アップロードAPIのレスポンス\n       */\n      export interface AttachmentInfo {\n        s3Prefix    : string //既に応募に紐付けられている場合にのみ保持するプロパティ\n        corporateId : string\n        fileId      : string\n        fileName    : string\n        fileType    : string\n        size        : number\n        yearMonth   : string\n      }\n\n      /**\n       * 応募追加 or 応募更新時に添付ファイルのマッピングを更新するために使用するオブジェクト\n       */\n      export interface AttachmentIdInfoAdd {\n        fileId    : string\n        yearMonth : string\n      }\n\n      /**\n       * 応募更新時に添付ファイルのマッピングを削除するためのオブジェクト\n       */\n      export interface AttachmentIdInfoDelete {\n        prefix    : string\n        fileId    : string\n      }\n\n      /**\n       * 応募先求人 (V2)\n       */\n      export interface ApplicationJob {\n        jobId: string;\n        jobName: string;\n        jobAdTitle: string;\n      }\n\n      /**\n       * 応募ノート (V2)\n       */\n      export interface ApplicationNote {\n        noteId?    : string;\n        userId?    : string;\n        note       : string;\n        isRecOnly  : boolean;\n        updatedBy? : UserIdName;\n        updatedAt? : string;\n        createdAt? : string;\n      }\n\n      /**\n       * 面接フィードバック\n       */\n      export interface ApplicationFeedback {\n        updatedBy: UserIdName;\n        updatedAt: string;\n      }\n\n      /**\n       * 応募者のレジュメ情報\n       */\n      export interface Resume {\n        education?: ResumeEducation[];\n        work?: ResumeWork[];\n        experiencedOccupations?: Occupation[];\n        experiencedIndustries?: Industry[];\n        certifications?: ResumeCertification[];\n      }\n\n      // 学歴\n      export interface ResumeEducation {\n        degree: string;\n        schoolName: string;\n        fieldOfStudy: string;\n        status: string;\n        startDate?: YearMonth;\n        endDate?: YearMonth;\n      }\n\n      // 職歴\n      export interface ResumeWork {\n        company: string;\n        title: string;\n        employmentType: string;\n        summary: string;\n        startDate?: YearMonth;\n        endDate?: YearMonth;\n        salaryType?: string;\n        salary?: number;\n      }\n\n      /**\n       * 資格取得情報\n       */\n      export interface ResumeCertification {\n        name: string;\n        certifiedDate: YearMonth;\n      }\n\n      // 職種\n      export interface Occupation {\n        code: string;\n        name: string;\n      }\n\n      // 業種\n      export interface Industry {\n        code: string;\n        name: string;\n      }\n    }\n\n    export module images {\n  \n      /**\n       * 求人 to 画像 のマッピング等の更新に利用するためのオブジェクト\n       */\n      export interface ImageIdPrefix {\n        imageId: string;\n        prefix: string;\n      }\n      export interface CoverImage extends ImageIdPrefix{}\n      export interface LogoImage extends ImageIdPrefix{}\n      export interface InlineImage extends ImageIdPrefix{}\n  \n      /**\n       * 画像一覧取得APIから取得した際の画像データ\n       */\n      export interface PooledImage {\n        id              : string;\n        name            : string;\n        aspectRatioType : string;\n        size            : number;\n        imageType       : string;\n        prefix          : string;\n        deletable       : boolean;\n      }\n    }\n\n    export module masters {\n\n      /**\n       * 年月\n       */\n      export interface YearMonth {\n        year: number;\n        month: number;\n      }\n\n      /**\n       * 年月日\n       */\n      export interface YearMonthDay {\n        year: number;\n        month: number;\n        day: number;\n      }\n\n      /**\n       * ユーザー情報\n       */\n      export interface UserIdName {\n        userId: string;\n        name: string;\n      }\n\n\n      export interface HtmlText {\n        htmlText: string;\n      }\n\n    }\n  }\n}\n\nmodule stanby.services.common.routes {\n  export function initRoutes(){\n\n    angular.module('stanbyServices')\n      .constant('FileUploadConfig', {\n        headers: {\"Content-Type\": undefined},\n        transformRequest: null\n      })\n      .factory('routes', function($http:ng.IHttpService, FileUploadConfig):any {\n\n        return {\n          configuration: {\n            retrieve:         () => $http.get('/api/configuration')\n          },\n\n          utils: {\n            convertMarkdownToHtml:(markdownText) => $http.post('/api/utils/markdown-to-html', {markdownText: markdownText})\n          },\n\n          jobs: {\n            list: ()              => $http.get('/api/jobs'),\n            findJobs: (conditions)  => $http.get('/api/jobs', {params: conditions}),\n            detail: (jobId)       => $http.get(`/api/jobs/${jobId}`),\n            create: (data)        => $http.post('/api/jobs', data),\n            update: (jobId, data) => $http.put(`/api/jobs/${jobId}`, data),\n            detailFreeText: (jobId)  => $http.get(`/api/jobs/${jobId}/free-text/html`),\n            previewAsPc:      (data) => $http.post('/api/jobs/preview/pc', data),\n            previewAsMobile:  (data) => $http.post('/api/jobs/preview/mobile', data),\n            applyPublishing:   (jobId) => $http.put(`/api/jobs/${jobId}/publishing/apply`, {}),\n            withdrawPublishing:(jobId) => $http.put(`/api/jobs/${jobId}/publishing/withdraw`, {}),\n            cancelPublishing:  (jobId) => $http.put(`/api/jobs/${jobId}/publishing/cancel`, {}),\n            updateClosingDay:  (jobId, closeAt) => $http.put(`/api/jobs/${jobId}/publishing/closingDay`, {closeAt: closeAt}),\n            validateAlias:     (data) => $http.post('/api/jobs/validate-alias', data)\n          },\n\n          interviews: {\n            listAll   : (conditions)    => $http.get('/api/interviews', {params: conditions}),\n            listAllToday : (conditions) => $http.get('/api/interviews/today', {params: conditions}),\n            listMine  : (conditions)    => $http.get('/api/interviews/mine', {params: conditions}),\n            listMyUnrated : (conditions)  => $http.get('/api/interviews/myunrated', {params: conditions}),\n            detail    : (id)            => $http.get(`/api/interviews/${id}`),\n            create    : (interview)     => $http.post('/api/interviews', interview),\n            update    : (id, interview) => $http.put(`/api/interviews/${id}`, interview),\n            addFeedback  : (id, fb) => $http.post(`/api/interviews/${id}/feedbacks`, fb),\n            updateFeedback: (id, fbId, fb) => $http.put(`/api/interviews/${id}/feedbacks/${fbId}`, fb)\n          },\n\n          docscreenings: {\n            detail     : (id)            => $http.get(`/api/docscreening/${id}`),\n            create     : (docscreening)     => $http.post('/api/docscreening', docscreening),\n            update     : (id, docscreening) => $http.put(`/api/docscreening/${id}`, docscreening),\n            feedback   : (id, docscreeningfeedback) => $http.post(`/api/docscreening/${id}/feedbacks`, docscreeningfeedback),\n            addFeedback  : (id, fb) => $http.post(`/api/docscreening/${id}/feedbacks`, fb),\n            updateFeedback: (id, fbId, fb) => $http.put(`/api/docscreening/${id}/feedbacks/${fbId}`, fb)\n          },\n\n          applications: {\n            list:         (conditions)    => $http.get('/api/applications', {params: conditions}),\n            overviews:    ()              => $http.get('/api/applications/overviews'),\n            uploadTempFile: (data)        => $http.post(`/api/applications/attachments`, data, FileUploadConfig),\n            details:      (applicationId) => $http.get(`/api/applications/${applicationId}`),\n            fetchPhone:   (applicationId) => $http.get(`/api/applications/${applicationId}/phone`),\n            fetchEmail:   (applicationId) => $http.get(`/api/applications/${applicationId}/email`),\n            downloadAttachment: (applicationId, prefix, fileId) => $http.get(`api/applications/${applicationId}/attachments/${prefix}/${fileId}`),\n            updateStatus: (applicationId, status, versionNo) => $http.put(`/api/applications/${applicationId}/status`, { selectionStage: status, versionNo: versionNo }),\n            attachFile:   (applicationId, data) => $http.post(`/api/applications/${applicationId}/attachments`, data, FileUploadConfig),\n            create:       (data)                => $http.post(`/api/applications`, data),\n            update:       (applicationId, data) => $http.put(`/api/applications/${applicationId}`, data),\n            addNote:      (id, data)            => $http.post(`/api/applications/${id}/notes`, data),\n            updateNote:   (id, noteId, data)    => $http.put(`/api/applications/${id}/notes/${noteId}`, data)\n          },\n\n          corporate: {\n            update: (data) => $http.put('/api/corporate', data),\n            show:   ()     => $http.get('/api/corporate')\n          },\n\n          users: {\n            list:         (status, role)  => $http.get('/api/corporate/users', {params: {status: status, role: role}}),\n            details:      (userId)        => $http.get('/api/corporate/users/' + userId),\n            loginUserDetails: ()          => $http.get('/api/corporate/users/loginUserDetails'),\n            create:       (data)          => $http.post('/api/corporate/users', data),\n            update:       (userId, data)  => $http.put('/api/corporate/users/' + userId, data),\n            updateStatus: (userId, data)  => $http.put('/api/corporate/users/' + userId + '/status', data)\n          },\n\n          corporatePublic: {\n            show:         () => $http.get('/api/corporate/public'),\n            update:       (data) => $http.put('/api/corporate/public', data)\n          },\n\n          profile: {\n            show:         () => $http.get('/api/profile/show'),\n            update:       (data) => $http.put('/api/profile', data),\n            changeEmail:  (data) => $http.put('/api/profile/email', data),\n            changePassword: (data) => $http.put('/api/profile/password', data),\n            resendConfirmation:  () => $http.post('/api/profile/resend-confirmation', {})\n          },\n\n          account: {\n            login:                (data)   => $http.post('/api/account/login', data, {suppress401ErrorMsg : true}),\n            logout:               ()       => $http.post('/api/account/logout', {}),\n            signup:               (data)   => $http.post('/api/account/signup', data),\n            forgotPassword:       (data)   => $http.post('/api/account/forgot-password', data),\n            getAccountInfo:       ()       => $http.get('/api/account'),\n            verifySignup:         (token)  => $http.get('/api/account/verify-signup/' + token),\n            verifyEmailChange:    (token)  => $http.get('/api/account/verify-email-change/' + token),\n            verifyForgotPassword: (token)  => $http.get('/api/account/verify-forgot-password/' + token),\n            resetForgotPassword:  (data)   => $http.post('/api/account/reset-forgot-password', data)\n          },\n\n          images: {\n            listLogos:     () => $http.get('/api/images/logo'),\n            listCovers:    () => $http.get('/api/images/cover'),\n            listInlines:   () => $http.get('/api/images/inline'),\n\n            uploadLogo:   (data) => $http.post('/api/images/logo', data, FileUploadConfig),\n            uploadCover:  (data) => $http.post('/api/images/cover', data, FileUploadConfig),\n            uploadInline: (data) => $http.post('/api/images/inline', data, FileUploadConfig),\n\n            deleteImage:  (imageId) => $http['delete'](`/api/images/${imageId}`), //NOTE(kitaly): IE8等でdeleteは予約語だと怒られるので\n\n            getTemporary:  (imageId, yearMonth) => $http.get(`/api/tmp-images/${imageId}/` + yearMonth),\n\n            uploadTemporaryLogo:    (data) => $http.post('/api/tmp-images/logo', data, FileUploadConfig),\n            uploadTemporaryCover:   (data) => $http.post('/api/tmp-images/cover', data, FileUploadConfig),\n            uploadTemporaryInline:  (data) => $http.post('/api/tmp-images/inline', data, FileUploadConfig)\n          },\n\n          validation: {\n            emailDuplicate:     (data) => $http.post('/api/validation/email-duplicate', {'email':data}),\n            emailDuplicateForUpdate:     (newEmail, currentEmail) => $http.post('/api/validation/email-duplicate-for-update', {'newEmail':newEmail, 'currentEmail':currentEmail}),\n            postalCode:         (data) => $http.post('/api/validation/postal-code', {'postalCode': data}),\n            phone:              (data) => $http.post('/api/validation/phone', {'phone': data})\n          },\n\n          masters: {\n            address:             (postalCode) => $http.get(`/api/masters/address/${postalCode}`)\n          },\n\n          contact: {\n            send: (email, inquiry) => $http.post('/api/contact', {'email': email, 'inquiry': inquiry})\n          }\n        };\n      });\n  }\n}\n","/// <reference path=\"../vendor_def/tsd.d.ts\" />\n/// <reference path=\"../services/common/routes.ts\" />\n/// <reference path=\"../directives/common/widgets.d.ts\" />\n\nmodule controllers.profile {\n\n  export class Profile {\n    constructor(\n      public enums: sb.Enums,\n      private routes: st.Routes,\n      private stUtils: std.Utils,\n      private profilePromise,\n      $scope: any\n    ) {\n      $scope.enums = this.enums;\n      $scope.routes = this.routes;\n      $scope.init = () => {\n        $scope.profile = profilePromise.data.corpUser;\n        $scope.roles = _.pluck(profilePromise.data.roles, 'role');\n      };\n      $scope.resendConfirmation = () => {\n        this.routes.profile.resendConfirmation()\n          .success(() => {\n            this.stUtils.toastInfo('認証メールを再送しました。');\n          })\n          .error(() => {\n            this.stUtils.toastDanger('認証メールの再送に失敗しました。');\n          });\n      };\n    }\n  }\n\n\n  export class Password {\n    constructor(\n        $scope: any,\n        $state: any,\n        stUtils: std.Utils,\n        routes: st.Routes) {\n\n      $scope.init = () => {\n        $scope.password = {\n          password: null,\n          newPassword: null,\n          newPasswordConfirm: null\n        };\n      };\n\n      $scope.update = form => {\n        if (form.$valid) {\n          routes.profile.changePassword($scope.password)\n            .success(data => {\n              stUtils.toastInfo('パスワードを変更しました。');\n              $state.transitionTo(\"profile\")\n            }).error(xhr => {\n              if(xhr.key == 'auth.signup.currentPasswordNotMatch'){\n                stUtils.toastDanger('現在のパスワードが間違っています。');\n                $scope.password = null;\n              } else if (xhr.key == 'auth.password.invalidFormat'){\n                stUtils.toastDanger(xhr.msg);\n                $scope.password = null;\n              }\n            });\n        }\n      }\n    }\n  }\n\n\n  export class Email {\n    constructor(\n        $scope: any,\n        $state: any,\n        stUtils: std.Utils,\n        routes: st.Routes,\n        _:_.LoDashStatic\n    ) {\n\n      $scope.init = () => {\n        $scope.email = \"\"\n      };\n\n      $scope.update = form => {\n        if (form.$valid) {\n          routes.profile.changeEmail({email: $scope.email})\n            .success(data => {\n              stUtils.withUpdateOkMessage(() => {\n                $state.transitionTo(\"profile\")\n              })\n            })\n            .error((xhr) => {\n              var errList = xhr['details']['email']\n              var duplicateError = _.find(errList, {'key': 'error.profile.emailDuplication'});\n              if(duplicateError){\n                stUtils.toastDanger('すでに使用されているメールアドレスです。');\n              }\n            });\n        } else {\n          stUtils.toastDanger(\"入力エラーがあります\");\n        }\n      }\n    }\n  }\n\n\n  export class BasicInfo {\n    constructor(\n      $scope: any,\n      $state: any,\n      stModal: std.Modal,\n      stUtils: std.Utils,\n      routes: st.Routes) {\n\n      $scope.init = () => {\n        routes.profile.show().success((data) => {\n          $scope.profile = data;\n        })\n      };\n\n      $scope.update = form => {\n        var modal = stModal.modalConfirm({\n          msg: '変更を保存します。よろしいですか？'\n        });\n\n        if (form.$valid) {\n          modal.result.then(() => {\n            if (!$scope.profile.title) {\n              $scope.profile.title = null;\n            }\n            var data = {\n              fullName: $scope.profile.fullName,\n              title: $scope.profile.title\n            };\n            routes.profile.update(data).success(data => {\n              stUtils.withUpdateOkMessage(() => {\n                $state.transitionTo(\"profile\")\n              })\n            });\n          });\n        }\n      };\n    }\n  }\n}\n\nmodule stanby.routing.profile{\n\n  import UserDetailResponse = stanby.models.users.UserDetailResponse;\n\n  export function initRouting(){\n\n    angular.module('stanbyControllers')\n      .config(($stateProvider, $urlRouterProvider) => {\n\n        $urlRouterProvider.otherwise('/');\n\n        $stateProvider\n          .state('profile', {\n            url: '/',\n            templateUrl: '/internal/profile/show.html',\n            controller: 'ProfileCtrl as pc',\n            resolve: {\n              accountPromise: function (routes: st.Routes): ng.IPromise<st.response.account.AccountInfoResponse> {\n                return routes.account.getAccountInfo();\n              },\n              profilePromise: function (routes: st.Routes): ng.IPromise<UserDetailResponse> {\n                return routes.users.loginUserDetails();\n              }\n            },\n            onEnter: ($rootScope) => {\n              $rootScope.$emit('breadcrumbs', [\n                { url: '/', text: 'Stanby Recruiting' },\n                { url: '', text: 'アカウント設定' }\n              ]);\n            }\n          })\n\n          .state('profile_change_basic', {\n            url: '/basic',\n            templateUrl: '/internal/profile/edit.html',\n            controller: 'BasicInfoCtrl as bic',\n            onEnter: ($rootScope) => {\n              $rootScope.$emit('breadcrumbs', [\n                { url: '/', text: 'Stanby Recruiting' },\n                { url: '/profile#/', text: 'アカウント設定' },\n                { url: '', text: 'アカウント情報の編集' }\n              ]);\n            }\n          })\n\n          .state('profile_change_password', {\n            url: '/password',\n            templateUrl: '/internal/profile/password.html',\n            controller: 'PasswordCtrl as pc',\n            onEnter: ($rootScope) => {\n              $rootScope.$emit('breadcrumbs', [\n                { url: '/', text: 'Stanby Recruiting' },\n                { url: '/profile#/', text: 'アカウント設定' },\n                { url: '', text: 'パスワード変更' }\n              ]);\n            }\n          })\n\n          .state('profile_change_email', {\n            url: '/email',\n            templateUrl: '/internal/profile/email.html',\n            controller: 'EmailCtrl as ec',\n            onEnter: ($rootScope) => {\n              $rootScope.$emit('breadcrumbs', [\n                { url: '/', text: 'Stanby Recruiting' },\n                { url: '/profile#/', text: 'アカウント設定' },\n                { url: '', text: 'メールアドレス変更' }\n              ]);\n            }\n          })\n        ;\n      })\n\n      .controller('ProfileCtrl', controllers.profile.Profile)\n      .controller('BasicInfoCtrl', controllers.profile.BasicInfo)\n      .controller('PasswordCtrl', controllers.profile.Password)\n      .controller('EmailCtrl', controllers.profile.Email)\n\n    ;\n  }\n}\n","/// <reference path=\"./controllers/profile-controller.ts\" />\n\nstanby.routing.profile.initRouting();"],"sourceRoot":"/source/"}