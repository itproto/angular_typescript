{"version":3,"sources":["/Users/kenji.morita/stanby-ats/stanby-ats-web/services/common/routes.ts","/Users/kenji.morita/stanby-ats/stanby-ats-web/utils/date.ts","/Users/kenji.morita/stanby-ats/stanby-ats-web/controllers/dashboard-controller.ts","/Users/kenji.morita/stanby-ats/stanby-ats-web/dashboard-page.ts"],"names":["stb","stb.ConfigService","stb.ConfigService.constructor","stb.ConfigService.getConfig","stb.ConfigService.getConfigPromise","stb.ConfigService.refreshConfig","stb.UserService","stb.UserService.constructor","stb.UserService.checkLogin","stb.UserService.getAccountInfoPromise","stb.UserService.getAccountInfo","stb.UserService.updateAccountInfo","stb.UserService.refreshAccountInfo","stb.UserService.checkLoggedIn","st","stanby","stanby.services","stanby.services.common","stanby.services.common.routes","stanby.services.common.routes.initRoutes","utils","utils.date","utils.date.getDateTimeStartISOString","utils.date.getDateTimeEndISOString","controllers","controllers.dashboard","controllers.dashboard.Dashboard","controllers.dashboard.Dashboard.constructor","controllers.dashboard.Dashboard.init","controllers.dashboard.DashboardSummary","controllers.dashboard.DashboardSummary.constructor","controllers.dashboard.DashboardSummary.init","controllers.dashboard.DashboardSummary.getWeekdayByDate","controllers.dashboard.DashboardSummary.getTodayParams","controllers.dashboard.DashboardInterviewsUnrated","controllers.dashboard.DashboardInterviewsUnrated.constructor","controllers.dashboard.DashboardInterviewsUnrated.init","controllers.dashboard.DashboardDocscreeningsUnrated","controllers.dashboard.DashboardDocscreeningsUnrated.constructor","controllers.dashboard.DashboardDocscreeningsUnrated.init","controllers.dashboard.DashboardDocscreeningsUnrated.getFormatByUpdatedAt","controllers.dashboard.DashboardJobApplicationCounts","controllers.dashboard.DashboardJobApplicationCounts.constructor","controllers.dashboard.DashboardJobApplicationCounts.init","controllers.dashboard.DashboardJobApplicationCounts.countAll","controllers.dashboard.DashboardInterviewsToday","controllers.dashboard.DashboardInterviewsToday.constructor","controllers.dashboard.DashboardInterviewsToday.init","controllers.dashboard.DashboardInterviewsToday.getTodayParams","controllers.dashboard.DashboardAccount","controllers.dashboard.DashboardAccount.constructor","controllers.dashboard.DashboardAccount.init","controllers.dashboard.DashboardSide","controllers.dashboard.DashboardSide.constructor","controllers.dashboard.DashboardSide.init","stanby.routing","stanby.routing.dashboard","stanby.routing.dashboard.initRouting"],"mappings":"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","file":"scripts/dashboard-page.js","sourcesContent":["/// <reference path=\"../../vendor_def/tsd.d.ts\" />\n\n\n\n\n\ninterface JQuery {\n  imgcentering(): void\n}\n\n\ninterface PopStateEvent {\n  dataTransfer: Object\n}\n\n\ninterface Object {\n  files: Object\n}\n\nmodule stb {\n  'use strict';\n\n  import acc = st.response.account\n  import cnf = st.response.configuration\n\n  export class ConfigService {\n    constructor(\n      private routes: st.Routes\n    ){}\n\n    private requestCount: number = 0;\n    private cachedPromise: ng.IHttpPromise<cnf.ConfigResponse>\n\n    public getConfig(callback: (res: cnf.ConfigResponse) => void) {\n\n      if(this.requestCount == 0){\n        this.refreshConfig();\n      }\n\n      this.cachedPromise.success((res: cnf.ConfigResponse) => {\n        if(callback) callback(res);\n      });\n    }\n\n    public getConfigPromise() {\n      if(this.requestCount == 0){\n        this.refreshConfig();\n      }\n\n      return this.cachedPromise;\n    }\n\n    private refreshConfig() {\n      this.cachedPromise = this.routes.configuration.retrieve();\n    }\n  }\n\n  export interface AccountInfoHandler {\n    (data?:acc.AccountInfoResponse): any\n  }\n  \n  export class UserService {\n\n    constructor(\n      private routes: st.Routes\n    ){}\n    \n    private requestCount: number = 0;\n    private cachedPromise:ng.IHttpPromise<acc.AccountInfoResponse>;\n\n\n    /**\n     * ログイン状態、非ログイン状態に応じて処理実行\n     * 初回コール時はHttpリクエストが発生するが2回目以降はキャッシュされた情報を利用する\n     * サーバに再問い合わせする場合は updateAccountInfo を利用 \n     * @param ifLogged: ログイン状態であれば実行する処理\n     * @param ifNotLogged: 非ログイン状態であれば実行する処理\n     */\n    public checkLogin(ifLogged: AccountInfoHandler, ifNotLogged?: Function){\n      if(this.requestCount == 0){\n        this.refreshAccountInfo();\n      }\n      this.checkLoggedIn(ifLogged, ifNotLogged);\n    }\n\n    public getAccountInfoPromise(): ng.IPromise<acc.AccountInfo> {\n      return this.cachedPromise.then((res) =>{\n          return res.data.account;\n      });\n    }\n\n    /**\n     * アカウント情報取得\n     * 初回コール時はHttpリクエストが発生するが2回目以降はキャッシュされた情報を利用する\n     * サーバに再問い合わせする場合は updateAccountInfo を利用\n     * @param callback\n     */\n    public getAccountInfo(ifLoggedInFunction: AccountInfoHandler) {\n      if(this.requestCount == 0){\n        this.refreshAccountInfo();\n      }\n      this.checkLoggedIn(ifLoggedInFunction, null);\n    }\n\n    /**\n     * 必ずサーバに問い合わせた上でアカウント情報を取得する\n     * 特に理由がなければ getAccountInfo でのキャッシュ利用を推奨\n     * @param callback\n     */\n    public updateAccountInfo(ifLoggedInFunction: AccountInfoHandler) {\n      this.refreshAccountInfo();\n      this.checkLoggedIn(ifLoggedInFunction, null);\n    }\n    \n    /* ==================\n     *  Assistant Methods\n     * ================== */\n    private refreshAccountInfo(): any {\n      this.requestCount++;\n      this.cachedPromise = this.routes.account.getAccountInfo();\n    }\n\n    private checkLoggedIn(ifLoggedInFunction   : AccountInfoHandler // ログイン済時に実行するFunction\n                         ,ifNotLoggedInFunction: Function           // 未ログイン時に実行するFunction\n                         ){\n      // NOTE(omiend): this.routes.account.getAccountInfo()はログインしていない場合「Status：200 - \"error.authentication\"」を返却\n      this.cachedPromise.success((data) => {\n        if (data.key === \"error.authentication\" && ifNotLoggedInFunction) {\n          ifNotLoggedInFunction();\n        } else if(ifLoggedInFunction){\n          ifLoggedInFunction(data);\n        }\n      });\n    }\n  }\n}\n\nmodule st {\n  'use strict';\n\n  export interface Routes {\n    configuration: routes.Configuration\n    utils: routes.Utils\n    jobs: routes.Jobs\n    applications: routes.Applications\n    interviews: routes.Interviews\n    docscreenings: routes.Docscreenings\n    corporate: routes.Corporate\n    corporatePublic: routes.CorporatePublic\n    users: routes.Users\n    profile: routes.Profile\n    account: routes.Account\n    images: routes.Images\n    validation: routes.Validation\n    masters: routes.Masters\n    contact: routes.Contact\n  }\n\n\n  export module routes {\n    import res = st.response\n    import QueryResultResponse = res.wrapper.QueryResultResponse;\n\n    export interface Configuration {\n      retrieve(): ng.IHttpPromise<response.configuration.ConfigResponse>\n    }\n\n    export interface Utils {\n      convertMarkdownToHtml(markdownText:string): ng.IHttpPromise<response.utils.HtmlText>\n    }\n\n    import ApplicationInfo          = res.applications.ApplicationInfo;\n    import ApplicationResponse      = res.applications.ApplicationResponse;\n    import ApplicationSearchParams  = res.applications.ApplicationSearchParams;\n    import AttachmentInfo           = res.applications.AttachmentInfo;\n\n    export interface Jobs {\n      list(): ng.IHttpPromise<response.jobs.JobListResponse>\n      findJobs(condition: ApplicationSearchParams): ng.IHttpPromise<response.jobs.JobListResponse>\n      detail(jobId:string): ng.IHttpPromise<response.jobs.Job>\n      create(data:any): ng.IHttpPromise<any>\n      update(jobId:string, data:any): ng.IHttpPromise<any>\n\n      detailFreeText(jobId:string): ng.IHttpPromise<any>\n\n      previewAsPc(data:any): ng.IHttpPromise<any>\n      previewAsMobile(data:any): ng.IHttpPromise<any>\n\n      applyPublishing(jobId:string): ng.IHttpPromise<any>\n      withdrawPublishing(jobId:string): ng.IHttpPromise<any>\n      cancelPublishing(jobId:string): ng.IHttpPromise<any>\n      updateClosingDay(jobId: string, closeAt: Date): ng.IHttpPromise<any>\n\n      validateAlias(data:any): ng.IHttpPromise<any>\n    }\n\n    export interface Applications {\n      list(condition: ApplicationSearchParams): ng.IHttpPromise<QueryResultResponse<ApplicationInfo>>\n      overviews(): ng.IHttpPromise<res.applications.ApplicationOverviewsResponse>\n      uploadTempFile(data)            : ng.IHttpPromise<AttachmentInfo>\n      details(applicationId:string)   : ng.IHttpPromise<ApplicationResponse>\n      fetchPhone(applicationId:string): any\n      fetchEmail(applicationId:string): any\n      downloadAttachment(applicationId: string, prefix: string, fileId: string): ng.IHttpPromise<any>\n      updateStatus(applicationId: string, selectionStage: string, versionNo: number): ng.IHttpPromise<any>\n      attachFile(applicationId, data) : ng.IHttpPromise<AttachmentInfo>\n      create(data:any): ng.IHttpPromise<any>\n      update(applicationId:string, data:any): ng.IHttpPromise<any>\n      addNote(applicationId:string, data: any): ng.IHttpPromise<any>\n      updateNote(applicationId:string, noteId, data: any): ng.IHttpPromise<any>\n    }\n\n\n    import Interview = res.interview.Interview;\n    import InterviewFeedback = res.interview.InterviewFeedback;\n    import InterviewSearchParams = res.interview.InterviewSearchParams;\n\n    export interface Interviews {\n      listAll(conditions : InterviewSearchParams)       : ng.IHttpPromise<QueryResultResponse<Interview>>\n      listAllToday(conditions : InterviewSearchParams)  : ng.IHttpPromise<QueryResultResponse<Interview>>\n      listMine(conditions : InterviewSearchParams)      : ng.IHttpPromise<QueryResultResponse<Interview>>\n      listMyUnrated(conditions : InterviewSearchParams) : ng.IHttpPromise<QueryResultResponse<Interview>>\n      detail(interviewId: string)                       : ng.IHttpPromise<Interview>\n      create(interview: Interview)                      : ng.IHttpPromise<any>\n      update(interviewId: string, interview: Interview) : ng.IHttpPromise<any>\n      addFeedback(interviewId: string, interviewfeedback: InterviewFeedback) : ng.IHttpPromise<any>\n      updateFeedback(interviewId: string, feedbackId, interviewfeedback: InterviewFeedback): ng.IHttpPromise<any>\n    }\n\n    export interface Docscreenings {\n      detail(interviewId: string)                       : ng.IHttpPromise<Interview>\n      create(interview: Interview)                      : ng.IHttpPromise<any>\n      update(interviewId: string, interview: Interview) : ng.IHttpPromise<any>\n      addFeedback(interviewId: string, interviewfeedback: InterviewFeedback) : ng.IHttpPromise<any>\n      updateFeedback(interviewId: string, feedbackId, interviewfeedback: InterviewFeedback): ng.IHttpPromise<any>\n    }\n\n    export interface Corporate {\n      update(any) : ng.IHttpPromise<any>\n      show()      : ng.IHttpPromise<any>\n    }\n\n    export interface Users {\n      list(status: string, role: string): ng.IHttpPromise<stanby.models.users.UserListResponse>\n      details(userId:string): ng.IHttpPromise<stanby.models.users.UserDetailResponse>\n      loginUserDetails(): ng.IHttpPromise<any>\n      create(data:any): ng.IHttpPromise<any>\n      update(userId:string, data:any): ng.IHttpPromise<any>\n      updateStatus(userId:string, data:any): ng.IHttpPromise<any>\n    }\n\n    export interface CorporatePublic {\n      show(): ng.IHttpPromise<any>\n      update(any): ng.IHttpPromise<any>\n    }\n\n    export interface Profile {\n      show(): ng.IHttpPromise<any>\n      update(data:any): ng.IHttpPromise<any>\n      changeEmail(data:any): ng.IHttpPromise<any>\n      changePassword(data:any): ng.IHttpPromise<any>\n      resendConfirmation(): ng.IHttpPromise<any>\n    }\n\n\n    export interface Account {\n      login(data:any): ng.IHttpPromise<any>\n      logout(): ng.IHttpPromise<any>\n      signup(data:any): ng.IHttpPromise<any>\n      forgotPassword(data:any): ng.IHttpPromise<any>\n      getAccountInfo(): ng.IHttpPromise<response.account.AccountInfoResponse>\n      verifySignup(token:string): ng.IHttpPromise<any>\n      verifyEmailChange(token:string): ng.IHttpPromise<any>\n      verifyForgotPassword(token:any): ng.IHttpPromise<any>\n      resetForgotPassword(data): ng.IHttpPromise<any>\n    }\n\n\n    export interface Images {\n\n      listLogos()   : ng.IHttpPromise<Array<res.images.PooledImage>>\n      listCovers()  : ng.IHttpPromise<Array<res.images.PooledImage>>\n      listInlines() : ng.IHttpPromise<Array<res.images.PooledImage>>\n\n      uploadLogo(data: any)           : ng.IHttpPromise<any>\n      uploadCover(data: any)          : ng.IHttpPromise<any>\n      uploadInline(data: any)         : ng.IHttpPromise<any>\n      deleteImage(imageId: string)    : ng.IHttpPromise<any>\n\n      getTemporary(imageId: string, yearMonth: string): ng.IHttpPromise<any>\n\n      uploadTemporaryLogo(data: any)  : ng.IHttpPromise<any>\n      uploadTemporaryCover(data: any) : ng.IHttpPromise<any>\n      uploadTemporaryInline(data: any): ng.IHttpPromise<any>\n    }\n\n\n    export interface Validation {\n      emailDuplicate(email:string): ng.IHttpPromise<any>\n      emailDuplicateForUpdate(newEmail:string, currentEmail:string): ng.IHttpPromise<any>\n      postalCode(postalCode:string): ng.IHttpPromise<any>\n      phone(phone:string): ng.IHttpPromise<any>\n    }\n\n\n    export interface Masters {\n      industries(): ng.IHttpPromise<any>\n      address(postalCode:string): ng.IHttpPromise<string>\n      benefits(jobTypeId:string): ng.IHttpPromise<string>\n      features(jobTypeId:string): ng.IHttpPromise<string>\n      occupations(): ng.IHttpPromise<any>\n      vacations(jobTypeId:string): ng.IHttpPromise<string>\n    }\n\n\n    export interface Contact {\n      send(email: string, inquiry: string): ng.IHttpPromise<any>\n    }\n  }\n\n\n  export module response {\n\n    export module pagination {\n      export interface PagingConditions {\n        offset?: number;\n        limit?: number;\n      }\n    }\n\n    export module wrapper {\n      export interface QueryResultResponse<T>{\n        requestInfo : QueryRequestInfo\n        resultInfo  : QueryResultInfo\n        hits        : Array<T>\n      }\n\n      export interface QueryResultInfo {\n        totalHits: number\n      }\n\n      export interface QueryRequestInfo {\n        offset: number\n        limit: number\n      }\n    }\n    export module configuration {\n      export interface ConfigResponse {\n        configuration: Configration\n      }\n      export interface Configration {\n        image: {\n          rootPath: string\n          maxNumberOf: number\n        }\n      }\n    }\n\n    export module utils {\n      export interface HtmlText {\n        htmlText: string\n      }\n    }\n\n    export module account {\n      export interface AccountInfoResponse {\n        account: AccountInfo\n        key: string\n      }\n      export interface AccountInfo {\n        userId: string\n        corporateId: string\n        fullName: string\n        email: string\n        roles:string[]\n      }\n    }\n    \n    export module corporate {\n      export interface CorporateInfo {\n        name: string\n      }\n    }\n    \n    export module jobs {\n\n      export interface JobListResponse {\n        jobs: Job[]\n      }\n\n      export interface Job { //V2\n        id: string;\n        openedAt: string;\n        closeAt: string;\n        jobIdAlias: string;\n        noEndDate: boolean;\n        name: string;\n        jobStatus?: string;\n        jobType: string;\n        versionNo: number;\n        updatedBy: string;\n        updatedAt: any; //TODO(kobayashi): [a] Dateにしたい\n        content?: JobDetails;\n        htmlFreeText?: string;\n        coverImage: images.CoverImage;\n        indexingStatus?: string;\n        rejectReason?: string;\n        jseJobPageUrl?: string;\n        matchingSearchCond?: boolean; // 一覧表示時の絞り込み用\n      }\n\n      export interface JobWithApplicationCount extends Job {\n        countAll?: number;\n        countNoAction?: number;\n        deadline?: string;\n        byStage?: any;\n      }\n\n      export interface JobSearchParams {\n        name?: string;\n        jobStatus?: string;\n        applicableStatus?: string;\n        indexingStatus?: string;\n      }\n\n      export interface  JobDetails { //V2\n        jobAdTitle: string;\n        salary: JobSalary;\n        locations: Array<JobLocation>;\n        locationSupplement: String;\n        descriptions: Array<JobTermDescription>;\n        markdownFreeText?: string;\n      }\n\n      export interface JobSalary { //V2\n        unit: string;\n        amountFrom: number;\n        amountTo: number;\n        supplement: string;\n      }\n\n      export interface JobLocation { //V2\n        postalCode: string;\n        address: string;\n      }\n\n      export interface JobTermDescription { //V2\n        term: string;\n        description: string;\n      }\n    }\n\n    export module interview {\n\n      export interface InterviewSearchParams extends pagination.PagingConditions {\n        interviewerId?: string; // ignored when querying one's own list\n        interviewType?: string; // DOC = 書類選考 / INT = 面接 / 設定なし ＝両方\n        keyword?      : string;\n        from?         : any; // Date or String (in UTC/ISO-861)\n        to?           : any; // Date or String (in UTC/ISO-861)\n        feedback?     : string; // Y/N or none\n      }\n\n      export interface Interview {\n        id?             : string;\n        title           : string;\n        startAt?        : string; //日時 in ISO/UTC\n        endAt?          : string; //日時 in ISO/UTC\n        place?          : string;\n        note?           : string;\n        interviewer?    : Interviewer;\n        interviewType   : string;\n        application?    : InterviewRefApplication;\n        job?            : InterviewRefJob;\n        feedbacks?      : Array<InterviewFeedback>;\n        updatedBy?      : masters.UserIdName;\n        updatedAt?      : string; //日時 in ISO/UTC\n        applicationId?  : string; //更新時のみ\n        versionNo?      : string;\n      }\n\n      export interface InterviewSummary {\n        total           : number;\n        interviews      : Array<Interview>\n      }\n\n      export interface Interviewer {\n        name    : string;\n        userId  : string; //NOTE(kitaly): null の場合有\n      }\n\n      export interface InterviewRefApplication {\n        applicationId     : string;\n        appliedAt         : string; //日時 in ISO/UTC\n        fullName          : string;\n        fullNameKana      : string;\n        lastTitle         : string;\n        lastOrganization  : string;\n        phone             : string;\n        email             : string;\n        birthDate         : masters.YearMonthDay;\n      }\n\n      export interface InterviewRefJob {\n        jobId       : string;\n        jobName     : string;\n        jobAdTitle  : string;\n      }\n\n      export interface InterviewFeedback {\n        interviewId?   : string; //NOTE(kitaly): APIからのJSONには無いので、クライアント側で挿入する必要あり\n        interviewType? : string;\n        interviewTitle?: string;\n        feedbackId?    : string;\n        grade          : string;\n        summary        : string;\n        updatedBy?     : masters.UserIdName;\n        updatedAt?     : string; //日時 in ISO/UTC\n      }\n    }\n\n    export module applications {\n\n      import UserIdName = masters.UserIdName\n      import YearMonth = masters.YearMonth\n      import YearMonthDay = masters.YearMonthDay\n\n      export interface ApplicationOverviewsResponse { // V2\n        overviews: ApplicationCountByJob[];\n      }\n\n      /**\n       * 応募者詳細APIのレスポンス\n       */\n      export interface ApplicationResponse { // V2\n        application: ApplicationInfo;\n      }\n\n      // 応募概況\n      export interface ApplicationCountByJob {\n        jobId: string;\n        countAll: number;\n        countNoAction: number;\n        byStage: Map<string, number>;\n      }\n\n      export interface ApplicationSearchParams extends pagination.PagingConditions {\n        keyword?: string;\n        jobId?: string;\n        statuses?: string; // TODO(omiend) 2.0.x :statusesはできれば複数選択にしたい\n      }\n\n      /**\n       * 応募情報 (V2)\n       */\n      export interface ApplicationInfo {\n        id: string;\n        appliedAt         : Date;\n        profile           : ApplicationProfile;\n        resumeFreeText    : string;\n        hasEmail          : boolean;\n        hasPhone          : boolean;\n        versionNo         : number;\n        updatedBy         : UserIdName;\n        updatedAt         : string;\n        createdAt         : string;\n        selectionStage    : string;\n        applicationSource : string;\n        message?          : string;\n        resume?           : Resume;\n        job?              : ApplicationJob;\n        selectionHistory? : Array<ApplicationStatus>;\n        notes?            : Array<ApplicationNote>;\n        interviews?       : Array<interview.Interview>;\n        attachments?      : Array<AttachmentInfo>;\n\n        //更新時用\n        attachmentIds?    : Array<AttachmentIdInfoAdd>; //新規作成時の添付ファイル追加用プロパティ\n        addAttachmentIds? : Array<AttachmentIdInfoAdd>; //更新時の添付ファイル追加用プロパティ\n        delAttachmentIds?  : Array<AttachmentIdInfoDelete>; //更新時の添付ファイル削除用プロパティ\n      }\n\n      /**\n       * 応募者プロフィール (V2)\n       */\n      export interface ApplicationProfile {\n        fullName: string;\n        fullNameKana: string;\n        lastOrganization?: string;\n        lastTitle?: string;\n        birthDate?: YearMonthDay;\n        gender?: string;\n        postalCode?: string;\n        address1?: string;\n        address2?: string;\n        currentOccupation?: string;\n        currentSalary?: string;\n        email: string;\n        phone: string;\n      }\n\n      /**\n       * 選考ステータス (V2)\n       */\n      export interface ApplicationStatus {\n        selectionStage: string;\n        updatedBy: UserIdName;\n        updatedAt: string;\n      }\n\n      /**\n       * 添付アップロードAPIのレスポンス\n       */\n      export interface AttachmentInfo {\n        s3Prefix    : string //既に応募に紐付けられている場合にのみ保持するプロパティ\n        corporateId : string\n        fileId      : string\n        fileName    : string\n        fileType    : string\n        size        : number\n        yearMonth   : string\n      }\n\n      /**\n       * 応募追加 or 応募更新時に添付ファイルのマッピングを更新するために使用するオブジェクト\n       */\n      export interface AttachmentIdInfoAdd {\n        fileId    : string\n        yearMonth : string\n      }\n\n      /**\n       * 応募更新時に添付ファイルのマッピングを削除するためのオブジェクト\n       */\n      export interface AttachmentIdInfoDelete {\n        prefix    : string\n        fileId    : string\n      }\n\n      /**\n       * 応募先求人 (V2)\n       */\n      export interface ApplicationJob {\n        jobId: string;\n        jobName: string;\n        jobAdTitle: string;\n      }\n\n      /**\n       * 応募ノート (V2)\n       */\n      export interface ApplicationNote {\n        noteId?    : string;\n        userId?    : string;\n        note       : string;\n        isRecOnly  : boolean;\n        updatedBy? : UserIdName;\n        updatedAt? : string;\n        createdAt? : string;\n      }\n\n      /**\n       * 面接フィードバック\n       */\n      export interface ApplicationFeedback {\n        updatedBy: UserIdName;\n        updatedAt: string;\n      }\n\n      /**\n       * 応募者のレジュメ情報\n       */\n      export interface Resume {\n        education?: ResumeEducation[];\n        work?: ResumeWork[];\n        experiencedOccupations?: Occupation[];\n        experiencedIndustries?: Industry[];\n        certifications?: ResumeCertification[];\n      }\n\n      // 学歴\n      export interface ResumeEducation {\n        degree: string;\n        schoolName: string;\n        fieldOfStudy: string;\n        status: string;\n        startDate?: YearMonth;\n        endDate?: YearMonth;\n      }\n\n      // 職歴\n      export interface ResumeWork {\n        company: string;\n        title: string;\n        employmentType: string;\n        summary: string;\n        startDate?: YearMonth;\n        endDate?: YearMonth;\n        salaryType?: string;\n        salary?: number;\n      }\n\n      /**\n       * 資格取得情報\n       */\n      export interface ResumeCertification {\n        name: string;\n        certifiedDate: YearMonth;\n      }\n\n      // 職種\n      export interface Occupation {\n        code: string;\n        name: string;\n      }\n\n      // 業種\n      export interface Industry {\n        code: string;\n        name: string;\n      }\n    }\n\n    export module images {\n  \n      /**\n       * 求人 to 画像 のマッピング等の更新に利用するためのオブジェクト\n       */\n      export interface ImageIdPrefix {\n        imageId: string;\n        prefix: string;\n      }\n      export interface CoverImage extends ImageIdPrefix{}\n      export interface LogoImage extends ImageIdPrefix{}\n      export interface InlineImage extends ImageIdPrefix{}\n  \n      /**\n       * 画像一覧取得APIから取得した際の画像データ\n       */\n      export interface PooledImage {\n        id              : string;\n        name            : string;\n        aspectRatioType : string;\n        size            : number;\n        imageType       : string;\n        prefix          : string;\n        deletable       : boolean;\n      }\n    }\n\n    export module masters {\n\n      /**\n       * 年月\n       */\n      export interface YearMonth {\n        year: number;\n        month: number;\n      }\n\n      /**\n       * 年月日\n       */\n      export interface YearMonthDay {\n        year: number;\n        month: number;\n        day: number;\n      }\n\n      /**\n       * ユーザー情報\n       */\n      export interface UserIdName {\n        userId: string;\n        name: string;\n      }\n\n\n      export interface HtmlText {\n        htmlText: string;\n      }\n\n    }\n  }\n}\n\nmodule stanby.services.common.routes {\n  export function initRoutes(){\n\n    angular.module('stanbyServices')\n      .constant('FileUploadConfig', {\n        headers: {\"Content-Type\": undefined},\n        transformRequest: null\n      })\n      .factory('routes', function($http:ng.IHttpService, FileUploadConfig):any {\n\n        return {\n          configuration: {\n            retrieve:         () => $http.get('/api/configuration')\n          },\n\n          utils: {\n            convertMarkdownToHtml:(markdownText) => $http.post('/api/utils/markdown-to-html', {markdownText: markdownText})\n          },\n\n          jobs: {\n            list: ()              => $http.get('/api/jobs'),\n            findJobs: (conditions)  => $http.get('/api/jobs', {params: conditions}),\n            detail: (jobId)       => $http.get(`/api/jobs/${jobId}`),\n            create: (data)        => $http.post('/api/jobs', data),\n            update: (jobId, data) => $http.put(`/api/jobs/${jobId}`, data),\n            detailFreeText: (jobId)  => $http.get(`/api/jobs/${jobId}/free-text/html`),\n            previewAsPc:      (data) => $http.post('/api/jobs/preview/pc', data),\n            previewAsMobile:  (data) => $http.post('/api/jobs/preview/mobile', data),\n            applyPublishing:   (jobId) => $http.put(`/api/jobs/${jobId}/publishing/apply`, {}),\n            withdrawPublishing:(jobId) => $http.put(`/api/jobs/${jobId}/publishing/withdraw`, {}),\n            cancelPublishing:  (jobId) => $http.put(`/api/jobs/${jobId}/publishing/cancel`, {}),\n            updateClosingDay:  (jobId, closeAt) => $http.put(`/api/jobs/${jobId}/publishing/closingDay`, {closeAt: closeAt}),\n            validateAlias:     (data) => $http.post('/api/jobs/validate-alias', data)\n          },\n\n          interviews: {\n            listAll   : (conditions)    => $http.get('/api/interviews', {params: conditions}),\n            listAllToday : (conditions) => $http.get('/api/interviews/today', {params: conditions}),\n            listMine  : (conditions)    => $http.get('/api/interviews/mine', {params: conditions}),\n            listMyUnrated : (conditions)  => $http.get('/api/interviews/myunrated', {params: conditions}),\n            detail    : (id)            => $http.get(`/api/interviews/${id}`),\n            create    : (interview)     => $http.post('/api/interviews', interview),\n            update    : (id, interview) => $http.put(`/api/interviews/${id}`, interview),\n            addFeedback  : (id, fb) => $http.post(`/api/interviews/${id}/feedbacks`, fb),\n            updateFeedback: (id, fbId, fb) => $http.put(`/api/interviews/${id}/feedbacks/${fbId}`, fb)\n          },\n\n          docscreenings: {\n            detail     : (id)            => $http.get(`/api/docscreening/${id}`),\n            create     : (docscreening)     => $http.post('/api/docscreening', docscreening),\n            update     : (id, docscreening) => $http.put(`/api/docscreening/${id}`, docscreening),\n            feedback   : (id, docscreeningfeedback) => $http.post(`/api/docscreening/${id}/feedbacks`, docscreeningfeedback),\n            addFeedback  : (id, fb) => $http.post(`/api/docscreening/${id}/feedbacks`, fb),\n            updateFeedback: (id, fbId, fb) => $http.put(`/api/docscreening/${id}/feedbacks/${fbId}`, fb)\n          },\n\n          applications: {\n            list:         (conditions)    => $http.get('/api/applications', {params: conditions}),\n            overviews:    ()              => $http.get('/api/applications/overviews'),\n            uploadTempFile: (data)        => $http.post(`/api/applications/attachments`, data, FileUploadConfig),\n            details:      (applicationId) => $http.get(`/api/applications/${applicationId}`),\n            fetchPhone:   (applicationId) => $http.get(`/api/applications/${applicationId}/phone`),\n            fetchEmail:   (applicationId) => $http.get(`/api/applications/${applicationId}/email`),\n            downloadAttachment: (applicationId, prefix, fileId) => $http.get(`api/applications/${applicationId}/attachments/${prefix}/${fileId}`),\n            updateStatus: (applicationId, status, versionNo) => $http.put(`/api/applications/${applicationId}/status`, { selectionStage: status, versionNo: versionNo }),\n            attachFile:   (applicationId, data) => $http.post(`/api/applications/${applicationId}/attachments`, data, FileUploadConfig),\n            create:       (data)                => $http.post(`/api/applications`, data),\n            update:       (applicationId, data) => $http.put(`/api/applications/${applicationId}`, data),\n            addNote:      (id, data)            => $http.post(`/api/applications/${id}/notes`, data),\n            updateNote:   (id, noteId, data)    => $http.put(`/api/applications/${id}/notes/${noteId}`, data)\n          },\n\n          corporate: {\n            update: (data) => $http.put('/api/corporate', data),\n            show:   ()     => $http.get('/api/corporate')\n          },\n\n          users: {\n            list:         (status, role)  => $http.get('/api/corporate/users', {params: {status: status, role: role}}),\n            details:      (userId)        => $http.get('/api/corporate/users/' + userId),\n            loginUserDetails: ()          => $http.get('/api/corporate/users/loginUserDetails'),\n            create:       (data)          => $http.post('/api/corporate/users', data),\n            update:       (userId, data)  => $http.put('/api/corporate/users/' + userId, data),\n            updateStatus: (userId, data)  => $http.put('/api/corporate/users/' + userId + '/status', data)\n          },\n\n          corporatePublic: {\n            show:         () => $http.get('/api/corporate/public'),\n            update:       (data) => $http.put('/api/corporate/public', data)\n          },\n\n          profile: {\n            show:         () => $http.get('/api/profile/show'),\n            update:       (data) => $http.put('/api/profile', data),\n            changeEmail:  (data) => $http.put('/api/profile/email', data),\n            changePassword: (data) => $http.put('/api/profile/password', data),\n            resendConfirmation:  () => $http.post('/api/profile/resend-confirmation', {})\n          },\n\n          account: {\n            login:                (data)   => $http.post('/api/account/login', data, {suppress401ErrorMsg : true}),\n            logout:               ()       => $http.post('/api/account/logout', {}),\n            signup:               (data)   => $http.post('/api/account/signup', data),\n            forgotPassword:       (data)   => $http.post('/api/account/forgot-password', data),\n            getAccountInfo:       ()       => $http.get('/api/account'),\n            verifySignup:         (token)  => $http.get('/api/account/verify-signup/' + token),\n            verifyEmailChange:    (token)  => $http.get('/api/account/verify-email-change/' + token),\n            verifyForgotPassword: (token)  => $http.get('/api/account/verify-forgot-password/' + token),\n            resetForgotPassword:  (data)   => $http.post('/api/account/reset-forgot-password', data)\n          },\n\n          images: {\n            listLogos:     () => $http.get('/api/images/logo'),\n            listCovers:    () => $http.get('/api/images/cover'),\n            listInlines:   () => $http.get('/api/images/inline'),\n\n            uploadLogo:   (data) => $http.post('/api/images/logo', data, FileUploadConfig),\n            uploadCover:  (data) => $http.post('/api/images/cover', data, FileUploadConfig),\n            uploadInline: (data) => $http.post('/api/images/inline', data, FileUploadConfig),\n\n            deleteImage:  (imageId) => $http['delete'](`/api/images/${imageId}`), //NOTE(kitaly): IE8等でdeleteは予約語だと怒られるので\n\n            getTemporary:  (imageId, yearMonth) => $http.get(`/api/tmp-images/${imageId}/` + yearMonth),\n\n            uploadTemporaryLogo:    (data) => $http.post('/api/tmp-images/logo', data, FileUploadConfig),\n            uploadTemporaryCover:   (data) => $http.post('/api/tmp-images/cover', data, FileUploadConfig),\n            uploadTemporaryInline:  (data) => $http.post('/api/tmp-images/inline', data, FileUploadConfig)\n          },\n\n          validation: {\n            emailDuplicate:     (data) => $http.post('/api/validation/email-duplicate', {'email':data}),\n            emailDuplicateForUpdate:     (newEmail, currentEmail) => $http.post('/api/validation/email-duplicate-for-update', {'newEmail':newEmail, 'currentEmail':currentEmail}),\n            postalCode:         (data) => $http.post('/api/validation/postal-code', {'postalCode': data}),\n            phone:              (data) => $http.post('/api/validation/phone', {'phone': data})\n          },\n\n          masters: {\n            address:             (postalCode) => $http.get(`/api/masters/address/${postalCode}`)\n          },\n\n          contact: {\n            send: (email, inquiry) => $http.post('/api/contact', {'email': email, 'inquiry': inquiry})\n          }\n        };\n      });\n  }\n}\n","module utils.date {\n\n    /**\n     * Get the start time for today (00:00:00.000) but in UTC\n     * @returns The first time for the day in UTC/ISO standard\n     */\n    export function getDateTimeStartISOString(): string {\n        var date = new Date();\n        date.setHours(0, 0, 0, 0);\n\n        // return date in UTC, ISO format\n        return date.toISOString();\n    }\n\n    /**\n     * Get the last time for today (23:59:59.999) but in UTC\n     * @returns The last time for the day in UTC/ISO standard\n     */\n    export function getDateTimeEndISOString(): string {\n        var date = new Date();\n        date.setHours(23, 59, 59, 999);\n\n        // return date in UTC, ISO format\n        return date.toISOString();\n    }\n\n}","/// <reference path=\"../vendor_def/tsd.d.ts\" />\n/// <reference path=\"../services/common/routes.ts\" />\n/// <reference path=\"../utils/date.ts\" />\n\nmodule controllers.dashboard {\n\n  import UserOverview = stanby.models.users.UserOverview;\n  import UserListResponse = stanby.models.users.UserListResponse;\n\n  export class Dashboard {\n    public account: st.response.account.AccountInfo;\n    public hasAdminRole = false;\n    public hasRecruiterRole = false;\n    public hasInterviewerRole = false;\n\n    constructor (\n      private accountPromise,\n      private profilePromise,\n      private enums: sb.Enums,\n      private stUtils: std.Utils,\n      private $document: any\n    ) {}\n\n    init(): void {\n      if (this.accountPromise) {\n        this.account = this.accountPromise.data.account;\n        this.hasAdminRole = _.contains(this.account.roles, this.enums.userRole.ADM.code);\n        this.hasRecruiterRole = _.contains(this.account.roles, this.enums.userRole.REC.code);\n        this.hasInterviewerRole = _.contains(this.account.roles, this.enums.userRole.INT.code);\n      }\n      if (this.profilePromise && !this.$document.context.referrer.match('signup')) {\n        if (this.profilePromise.data.corpUser.status.name === this.enums.userStatus.REG) {\n          this.stUtils.toastWarning('メールアドレス認証が完了していません。<br/>認証メールの再送は<a href=\"/profile#/\">アカウント設定画面</a>よりおこなえます。');\n        }\n      }\n    }\n  }\n\n  export class DashboardSummary {\n    public account: st.response.account.AccountInfo;\n    public corporate: st.response.corporate.CorporateInfo;\n\n    // this filters jobs on jobStatus == 'PUB'\n    public jobsRecruiting: Array<st.response.jobs.Job>;\n    // this filters all interviews that are due today\n    public interviewsToday: Array<st.response.interview.Interview>;\n    public interviewsTodayCount: number;\n    // this filters my interviews with no feedback\n    public interviewsUnrated: Array<st.response.interview.Interview>;\n    public interviewsUnratedCount: number;\n    // this filters my interviews with no feedback and interviewType = 'DOC'\n    public docscreeningsUnrated: Array<st.response.interview.Interview>;\n    public docscreeningsUnratedCount: number;\n\n    public isoDateNow: string;\n    public hasAdminRole = false;\n    public hasRecruiterRole = false;\n    public hasInterviewerRole = false;\n\n    public numOfJobsWithNoActionApplications: number;\n    public numOfNoActionApplications: number;\n\n\n    constructor (\n      private enums: sb.Enums,\n      private corporatePromise,\n      private accountPromise,\n      private interviewsMyUnratedPromise,\n      private interviewsTodayPromise,\n      private jobsPublishedPromise,\n      private docscreeningsPromise,\n      private jobApplicationCountsPromise: ng.IHttpPromiseCallbackArg<st.response.applications.ApplicationOverviewsResponse>\n    ) {}\n\n    init(): void {\n      if (this.accountPromise) {\n        this.account = this.accountPromise.data.account;\n        this.corporate = this.corporatePromise.data;\n        this.hasAdminRole = _.contains(this.account.roles, this.enums.userRole.ADM.code);\n        this.hasRecruiterRole = _.contains(this.account.roles, this.enums.userRole.REC.code);\n        this.hasInterviewerRole = _.contains(this.account.roles, this.enums.userRole.INT.code);\n      }\n\n      if (this.jobsPublishedPromise) {\n        this.jobsRecruiting = this.jobsPublishedPromise.data.jobs;\n      }\n\n      if (this.interviewsMyUnratedPromise) {\n        this.interviewsUnrated = this.interviewsMyUnratedPromise.data.hits;\n        this.interviewsUnratedCount = this.interviewsMyUnratedPromise.data.resultInfo.totalHits;\n      }\n\n      if (this.interviewsTodayPromise) {\n        this.interviewsToday = this.interviewsTodayPromise.data.hits;\n        this.interviewsTodayCount = this.interviewsTodayPromise.data.resultInfo.totalHits;\n      }\n\n      if (this.docscreeningsPromise) {\n        this.docscreeningsUnrated = this.docscreeningsPromise.data.hits;\n        this.docscreeningsUnratedCount = this.docscreeningsPromise.data.resultInfo.totalHits;\n      }\n\n      if (this.jobApplicationCountsPromise && this.jobApplicationCountsPromise.data.overviews && this.jobApplicationCountsPromise.data.overviews.length > 0){\n        var overviews = this.jobApplicationCountsPromise.data.overviews;\n        this.numOfJobsWithNoActionApplications = _.reduce(_.map(overviews, (byJob) => {\n          return (byJob.countNoAction > 0 ? 1 : 0);\n        }), (acc: number, curr: number) => {\n          return acc + curr;\n        });\n\n        this.numOfNoActionApplications = _.reduce(_.map(overviews, (byJob) => {\n          return byJob.countNoAction;\n        }), (acc: number, curr: number) => {\n          return acc + curr;\n        });\n      } else {\n        this.numOfJobsWithNoActionApplications = 0;\n        this.numOfNoActionApplications = 0;\n      }\n\n      this.isoDateNow = (new Date()).toISOString();\n    }\n\n    /**\n     * ISO形式の日時から曜日文字を取得\n     */\n    public getWeekdayByDate(isoDateTarget: string): string {\n      var\n        dateTarget = new Date(isoDateTarget),\n        indexWeekday = dateTarget.getDay();\n\n      return ['日', '月', '火', '水', '木', '金', '土'][indexWeekday];\n    }\n\n    /**\n     * 本日の面接一覧URLのためにパラメータを作成して取得\n     */\n    public getTodayParams(): string {\n      return '?limit=20&interviewType=INT&from=' + utils.date.getDateTimeStartISOString() + '&to='\n          + utils.date.getDateTimeEndISOString();\n    }\n  }\n\n  export class DashboardInterviewsUnrated {\n    public interviewsUnrated: Array<st.response.interview.Interview>;\n    public interviewsUnratedCount: number;\n\n    constructor (\n      private interviewsMyUnratedPromise\n    ) {}\n\n    init(): void {\n      if (this.interviewsMyUnratedPromise) {\n        this.interviewsUnrated = this.interviewsMyUnratedPromise.data.hits;\n        this.interviewsUnratedCount = this.interviewsMyUnratedPromise.data.resultInfo.totalHits;\n      }\n    }\n  }\n\n  export class DashboardDocscreeningsUnrated {\n    public docscreeningsUnrated: Array<st.response.interview.Interview>;\n    public docscreeningsUnratedCount: number;\n\n    constructor (\n      private docscreeningsPromise\n    ) {}\n\n    init(): void {\n      if (this.docscreeningsPromise) {\n        this.docscreeningsUnrated = this.docscreeningsPromise.data.hits;\n        this.docscreeningsUnratedCount = this.docscreeningsPromise.data.resultInfo.totalHits;\n      }\n    }\n\n    /**\n     * (filter用)\n     * 更新日時が当日の場合は時間のフォーマット、\n     * 別日の場合は日付のフォーマットを取得。\n     */\n    public getFormatByUpdatedAt(updatedAt: string): string {\n      var\n        isSameDate = false,\n        dateTarget = new Date(updatedAt),\n        dateNow = new Date();\n\n      dateTarget.setHours(0, 0, 0, 0);\n      dateNow.setHours(0, 0, 0, 0);\n\n      isSameDate = (dateTarget.getTime() === dateNow.getTime());\n\n      if (isSameDate) {\n        return 'HH:mm';\n      } else {\n        return 'yyyy/MM/dd';\n      }\n    }\n  }\n\n  export class DashboardJobApplicationCounts {\n    public jobsRecruiting: Array<st.response.jobs.JobWithApplicationCount>;\n\n    constructor (\n      private jobsPublishedPromise,\n      private jobApplicationCountsPromise,\n      private _:_.LoDashStatic\n    ) {}\n\n    init(): void {\n      var mergeToJobs = () => {\n        this.jobsRecruiting = _.map(this.jobsPublishedPromise.data.jobs, (job: st.response.jobs.JobWithApplicationCount) => {\n          var zeroCounts = {\"NOA\":0, \"SCR\":0, \"PRG\":0, \"OFR\":0, \"RJC\":0, \"DEC\":0};\n          var found = _.find<st.response.applications.ApplicationCountByJob>(\n              this.jobApplicationCountsPromise.data.overviews, (ac) => {\n            return ac.jobId === job.id;\n          });\n          if (found) {\n            job.countAll = found.countAll;\n            job.countNoAction = found.countNoAction;\n            job.byStage = this._.merge(zeroCounts, found.byStage);\n          } else {\n            job.countAll = job.countNoAction = 0;\n            job.byStage = zeroCounts;\n          }\n          return job;\n        });\n      };\n\n      mergeToJobs();\n    }\n\n    public countAll(): number {\n      return this._.reduce(this.jobsRecruiting, (total, job) => {\n        return total + (job.countAll || 0);\n      }, 0);\n    }\n  }\n\n  export class DashboardInterviewsToday {\n    public interviewsToday: Array<st.response.interview.Interview>;\n    public interviewsTodayCount: number;\n\n    constructor (\n      // NOTE: thrbrd: 採用担当限定の機能なので、全面接を取得\n      private interviewsTodayPromise\n    ) {}\n\n    init(): void {\n      if (this.interviewsTodayPromise) {\n        this.interviewsToday = this.interviewsTodayPromise.data.hits;\n        this.interviewsTodayCount = this.interviewsTodayPromise.data.resultInfo.totalHits;\n      }\n    }\n\n    /**\n     * 本日の面接一覧URLのためにパラメータを作成して取得\n     */\n    public getTodayParams(): string {\n      return '?limit=20&interviewType=INT&from=' + utils.date.getDateTimeStartISOString()\n          + '&to=' + utils.date.getDateTimeEndISOString();\n    }\n  }\n\n  export class DashboardAccount {\n    public users: UserListResponse;\n\n    constructor (\n        private usersPromise\n    ) {}\n\n    init(): void {\n      if (this.usersPromise) {\n        this.users = this.usersPromise.data.users;\n      }\n    }\n  }\n\n  export class DashboardSide {\n    public account: st.response.account.AccountInfo;\n    public users: Array<UserOverview>;\n    public usersRecruiter: Array<UserOverview>;\n    public jobsReady: Array<st.response.jobs.Job>;\n    public hasAdminRole = false;\n    public hasRecruiterRole = false;\n    public hasInterviewerRole = false;\n\n    constructor (\n      private enums: sb.Enums,\n      private accountPromise,\n      private usersPromise,\n      private jobsReadyPromise\n    ) {}\n\n    init(): void {\n      if (this.accountPromise) {\n        this.account = this.accountPromise.data.account;\n        this.hasAdminRole = _.contains(this.account.roles, this.enums.userRole.ADM.code);\n        this.hasRecruiterRole = _.contains(this.account.roles, this.enums.userRole.REC.code);\n        this.hasInterviewerRole = _.contains(this.account.roles, this.enums.userRole.INT.code);\n      }\n\n      if (this.usersPromise) {\n        this.users = this.usersPromise.data.users;\n        this.usersRecruiter = this.users;\n      }\n\n      if (this.jobsReadyPromise) {\n        this.jobsReady = this.jobsReadyPromise.data.jobs;\n      }\n    }\n  }\n}\n\nmodule stanby.routing.dashboard {\n\n  import UserListResponse = stanby.models.users.UserListResponse;\n  import UserDetailResponse = stanby.models.users.UserDetailResponse;\n\n  export function initRouting(){\n\n    angular.module('stanbyControllers')\n      /* ========= Controllers ========= */\n      .controller('DashboardCtrl', controllers.dashboard.Dashboard)\n      .controller('DashboardSummaryCtrl', controllers.dashboard.DashboardSummary)\n      .controller('DashboardInterviewsUnratedCtrl', controllers.dashboard.DashboardInterviewsUnrated)\n      .controller('DashboardDocscreeningsUnratedCtrl', controllers.dashboard.DashboardDocscreeningsUnrated)\n      .controller('DashboardJobApplicationCountsCtrl', controllers.dashboard.DashboardJobApplicationCounts)\n      .controller('DashboardInterviewsTodayCtrl', controllers.dashboard.DashboardInterviewsToday)\n      .controller('DashboardAccountCtrl', controllers.dashboard.DashboardAccount)\n      .controller('DashboardSideCtrl', controllers.dashboard.DashboardSide)\n\n      .config(($stateProvider, $urlRouterProvider, enums: sb.Enums) => {\n        $urlRouterProvider.otherwise('/');\n\n        $stateProvider.state('dashboard', {\n          url: '/',\n          views: {\n            '': {\n              templateUrl: '/internal/controllers/dashboard/base',\n              controller: 'DashboardCtrl as c'\n            },\n            'summary@dashboard': {\n              templateUrl: '/internal/controllers/dashboard/summary',\n              controller: 'DashboardSummaryCtrl as smc'\n            },\n            'interviews-unrated@dashboard': {\n              templateUrl: '/internal/controllers/dashboard/interviews-unrated',\n              controller: 'DashboardInterviewsUnratedCtrl as iuc'\n            },\n            'docscreenings-unrated@dashboard': {\n              templateUrl: '/internal/controllers/dashboard/docscreenings-unrated',\n              controller: 'DashboardDocscreeningsUnratedCtrl as duc'\n            },\n            'job-application-counts@dashboard': {\n              templateUrl: '/internal/controllers/dashboard/job-application-counts',\n              controller: 'DashboardJobApplicationCountsCtrl as jac'\n            },\n            'interviews-today@dashboard': {\n              templateUrl: '/internal/controllers/dashboard/interviews-today',\n              controller: 'DashboardInterviewsTodayCtrl as itc'\n            },\n            'account@dashboard': {\n              templateUrl: '/internal/controllers/dashboard/account',\n              controller: 'DashboardAccountCtrl as acc'\n            },\n            'side@dashboard': {\n              templateUrl: '/internal/controllers/dashboard/side',\n              controller: 'DashboardSideCtrl as sdc'\n            }\n          },\n          resolve: {\n            accountPromise: function (routes: st.Routes): ng.IPromise<st.response.account.AccountInfoResponse> {\n              return routes.account.getAccountInfo();\n            },\n            corporatePromise: function (routes: st.Routes): ng.IPromise<st.response.corporate.CorporateInfo> {\n              return routes.corporatePublic.show();\n            },\n            interviewsMyUnratedPromise: function(routes: st.Routes, accountPromise): ng.IPromise<st.response.interview.Interview> {\n              if (_.contains(accountPromise.data.account.roles, enums.userRole.INT.code)) {\n                return routes.interviews.listMyUnrated({interviewType: enums.userRole.INT.code});\n              } else {\n                return null;\n              }\n            },\n            interviewsTodayPromise: function(routes: st.Routes, accountPromise): ng.IPromise<st.response.interview.Interview> {\n              if (_.contains(accountPromise.data.account.roles, enums.userRole.REC.code)) {\n                return routes.interviews.listAllToday({\n                  interviewType: enums.userRole.INT.code,\n                  from: utils.date.getDateTimeStartISOString(),\n                  to: utils.date.getDateTimeEndISOString()\n                });\n              }\n              else {\n                return null;\n              }\n            },\n            docscreeningsPromise: function (routes: st.Routes, accountPromise): ng.IPromise<st.response.interview.Interview> {\n              if (_.contains(accountPromise.data.account.roles, enums.userRole.INT.code)) {\n                return routes.interviews.listMyUnrated({interviewType: enums.interviewType.DOC.code});\n              } else {\n                return null;\n              }\n            },\n            jobsPublishedPromise: function (routes: st.Routes, accountPromise): ng.IPromise<st.response.jobs.JobListResponse> {\n              if (_.contains(accountPromise.data.account.roles, enums.userRole.REC.code)) {\n                return routes.jobs.findJobs({jobStatus: enums.jobStatus.PUB.code});\n              }\n              else {\n                return null;\n              }\n            },\n            jobsReadyPromise: function (routes: st.Routes, accountPromise): ng.IPromise<st.response.jobs.JobListResponse> {\n              if (_.contains(accountPromise.data.account.roles, enums.userRole.REC.code)) {\n                return routes.jobs.findJobs({jobStatus: enums.jobStatus.RDY.code});\n              }\n              else {\n                return null;\n              }\n            },\n            jobApplicationCountsPromise: function (routes: st.Routes, accountPromise): ng.IPromise<st.response.applications.ApplicationOverviewsResponse> {\n              if (_.contains(accountPromise.data.account.roles, enums.userRole.REC.code)) {\n                return routes.applications.overviews();\n              } else {\n                return null;\n              }\n            },\n            usersPromise: function (routes: st.Routes, accountPromise): ng.IPromise<UserListResponse> {\n              if (_.contains(accountPromise.data.account.roles, enums.userRole.REC.code) || _.contains(accountPromise.data.account.roles, enums.userRole.INT.code)) {\n                return routes.users.list(null, null);\n              } else {\n                return null;\n              }\n            },\n            profilePromise: function (routes: st.Routes): ng.IPromise<UserDetailResponse> {\n              return routes.users.loginUserDetails();\n            }\n          },\n          onEnter: ($rootScope) => {\n            $rootScope.$emit('breadcrumbs', [\n              { url: '', text: 'Stanby Recruiting' }\n            ]);\n          }\n        });\n      });\n  }\n}\n","/// <reference path=\"./controllers/dashboard-controller.ts\" />\n\n\nstanby.routing.dashboard.initRouting();"],"sourceRoot":"/source/"}